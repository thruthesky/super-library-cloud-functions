{
    "rules": {
        "test": {
            ".read": true
        },
        "data": {
          ".read": true,
          "$key": {
            ".write": "newData.child('uid').val() === auth.uid || ( data.child('uid').val() === auth.uid && !newData.exists() )",
            "category": {
              ".validate": "newData.val().length > 0 && newData.val().length < 256"
            },
            "title": {
              ".validate": "newData.val().length < 1024"
            },
            "content": {
              ".validate": "newData.val().length < 65536"
            }
          }
        },
        "admins": {
            ".read": true,
            ".write": "root.child('admins').hasChild(auth.uid)"
        },
        // FlutterFlow
        "blocked-users": {
          "$uid": {
	          ".read": "$uid == auth.uid",
  	        ".write": "$uid == auth.uid",
          }
        },
				"games": {
          "puzzle": {
            "$size": {
              ".indexOn": ["time"],
              ".read": true,
              "$uid": {
                ".write": "$uid === auth.uid"
              }
            }
          },
          "candy-crush": {
            "$size": {
              ".indexOn": ["time"],
              ".read": true,
              "$uid": {
                ".write": "$uid === auth.uid"
              }
            }
          },
          "puzzle-urls":{
            "$uid": {
              ".read": "$uid === auth.uid",
              ".write": "$uid === auth.uid",
            }
          }
        },
        // ai chat and ai homework rules
        "ai": {
          "$uid": {
            "chatbot": {
              ".read": "$uid === auth.uid",
            	".write": "$uid === auth.uid",
              ".indexOn": "createdAt"
            },
            "homework": {
              ".read": "$uid === auth.uid",
            	".write": "$uid === auth.uid",
              ".indexOn": "createdAt"
            }
          }
        },
        // EO AI chat and AI homework rules
        "app-settings": {
            ".read": true,
            ".write": "root.child('admins').hasChild(auth.uid)",
              "$id": {
                ".read": true,
              }
        },
        "users": {
            ".read": true,
            "$uid": {
                ".write": "$uid === auth.uid || root.child('admins').hasChild(auth.uid)",
                "isDisabled": {
                    ".validate": "root.child('admins').hasChild(auth.uid)"
                }
            },
            ".indexOn": [
                "gender",
                "nationality",
                "region",
                "birthYear"
            ]
        },
        "user-settings": {
            "$uid": {
                ".read": "$uid === auth.uid",
                ".write": "$uid === auth.uid"
            }
        },
        "user-phone-sign-in-numbers": {
            ".read": true,
            ".write": "auth != null"
        },
        "chat": {
            "-info": {
                "timestamp": {
                    ".read": true,
                    ".write": true
                }
            },
            "invited-users": {
                ".read": true,
                ".write": true,
                "$uid": {
                    ".indexOn": [
                        ".value"
                    ]
                }
            },
            "rejected-users": {
                ".read": true,
                ".write": true
            },
            "joins": {
                ".read": true,
                ".write": true,
                "$uid": {
                    "$room_id": {},
                    ".indexOn": [
                        "order",
                        "singleOrder",
                        "groupOrder",
                        "openOrder"
                    ]
                }
            },
            "messages": {
                "$room_id": {
                    ".read": true,
                    ".write": true,
                    ".indexOn": [
                        "order",
                        "protocol"
                    ]
                }
            },
            "rooms": {
                ".read": true,
                ".write": true
            },
            "settings": {
                ".read": true,
                ".write": true
            }
        },
        "posts": {
          ".read": true,
          ".write":true,
        },
        "reports": {
          ".read":true,
            "---key-list": {
                ".read": true,
                "$reportKey": {
                    ".write": "newData.val() === auth.uid"
                }
            },
            "$uid": {
                // ".read": "$uid === auth.uid", // OLD
              ".read":true, // FROM FLUTTERFLOW
                "$reportKey": {
                    ".write": "newData.child('reporter').val() === auth.uid"
                },
                ".indexOn": [
                    "path"
                ]
            }
        },
        "fcm-tokens": {
            ".read": true,
            "$token": {
                ".write": "newData.val() === auth.uid"
            },
            ".indexOn": [
                ".value"
            ]
        },
        "fcm-subscriptions": {
            ".read": true,
            "$subscriptionId": {
                "$uid": {
                    ".write": "$uid === auth.uid"
                }
            }
        },
        "settings": {
          ".read": true,
          ".write": true
        }
    }
}